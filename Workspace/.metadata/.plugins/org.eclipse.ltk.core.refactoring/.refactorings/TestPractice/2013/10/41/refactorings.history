<?xml version="1.0" encoding="UTF-8"?>
<session version="1.0">&#x0A;<refactoring comment="Rename package &apos;edu.sjsu.practice&apos; to &apos;Amazon&apos;&#x0A;- Original project: &apos;TestPractice&apos;&#x0A;- Original element: &apos;TestPractice/src/edu.sjsu.practice&apos;&#x0A;- Renamed element: &apos;TestPractice/src/Amazon&apos;&#x0A;- Update references to refactored element&#x0A;- Update textual occurrences in comments and strings" description="Rename package &apos;edu.sjsu.practice&apos;" flags="589830" hierarchical="false" id="org.eclipse.jdt.ui.rename.package" input="/src&lt;edu.sjsu.practice" name="Amazon" qualified="false" references="true" stamp="1381361392638" textual="false" version="1.0"/>&#x0A;<refactoring clone="true" comment="Infer generic type arguments on &apos;TestPractice&apos;&#x0A;- Original project: &apos;TestPractice&apos;&#x0A;- Original elements:&#x0A;     general.BinaryTree.java&#x0A;- Assume clone() returns an instance of the receiver type&#x0A;- Leave unconstrained type arguments raw" description="Infer generic type arguments" element1="/src&lt;general{BinaryTree.java" flags="6" id="org.eclipse.jdt.ui.infer.typearguments" leave="true" stamp="1381363562420" version="1.0"/>&#x0A;&#x0A;&#x0A;&#x0A;<refactoring comment="Rename type variable &apos;T&apos; of &apos;general.BinaryTree.Node&apos; to &apos;Integer&apos;&#x0A;- Original project: &apos;TestPractice&apos;&#x0A;- Original element: &apos;T&apos;&#x0A;- Renamed element: &apos;Integer&apos;&#x0A;- Update references to refactored element" description="Rename type variable &apos;T&apos;" id="org.eclipse.jdt.ui.rename.type.parameter" input="/src&lt;general{BinaryTree.java[BinaryTree[Node" name="Integer" parameter="T" references="true" stamp="1381364765079" version="1.0"/>&#x0A;<refactoring comment="Move element &apos;&apos; to &apos;general.BinaryTree.postOrderTravesal()&apos;&#x0A;- Original project: &apos;TestPractice&apos;&#x0A;- Destination element: &apos;general.BinaryTree.postOrderTravesal()&apos;&#x0A;- Original element: &apos;general.BinaryTree.getMaxValueLesserThanNode(...)&apos;&#x0A;- Textual move only&#x0A;- Update references to refactored element" description="Move method" destination="/src&lt;general{BinaryTree.java[BinaryTree~postOrderTravesal" element1="/src&lt;general{BinaryTree.java[BinaryTree~getMaxValueLesserThanNode~QNode;" flags="589830" id="org.eclipse.jdt.ui.move" members="1" policy="org.eclipse.jdt.ui.moveMembers" stamp="1381515600163" version="1.0"/>&#x0A;<refactoring comment="Move element &apos;&apos; to &apos;general.BinaryTree.postOrderTravesal()&apos;&#x0A;- Original project: &apos;TestPractice&apos;&#x0A;- Destination element: &apos;general.BinaryTree.postOrderTravesal()&apos;&#x0A;- Original element: &apos;general.BinaryTree.toString()&apos;&#x0A;- Textual move only&#x0A;- Update references to refactored element" description="Move method" destination="/src&lt;general{BinaryTree.java[BinaryTree~postOrderTravesal" element1="/src&lt;general{BinaryTree.java[BinaryTree~toString" flags="589830" id="org.eclipse.jdt.ui.move" members="1" policy="org.eclipse.jdt.ui.moveMembers" stamp="1381515603185" version="1.0"/>&#x0A;<refactoring comment="Move element &apos;&apos; to &apos;general.BinaryTree.isLeaf(...)&apos;&#x0A;- Original project: &apos;TestPractice&apos;&#x0A;- Destination element: &apos;general.BinaryTree.isLeaf(...)&apos;&#x0A;- Original element: &apos;general.BinaryTree.levelOrderTraversal()&apos;&#x0A;- Textual move only&#x0A;- Update references to refactored element" description="Move method" destination="/src&lt;general{BinaryTree.java[BinaryTree~isLeaf~QNode;" element1="/src&lt;general{BinaryTree.java[BinaryTree~levelOrderTraversal" flags="589830" id="org.eclipse.jdt.ui.move" members="1" policy="org.eclipse.jdt.ui.moveMembers" stamp="1381529254691" version="1.0"/>&#x0A;<refactoring comment="Rename type &apos;general.LeastRecentlyUsed&apos; to &apos;LeastRecentlyUsedCache&apos;&#x0A;- Original project: &apos;TestPractice&apos;&#x0A;- Original element: &apos;general.LeastRecentlyUsed&apos;&#x0A;- Renamed element: &apos;general.LeastRecentlyUsedCache&apos;&#x0A;- Update references to refactored element&#x0A;- Update textual occurrences in comments and strings" description="Rename type &apos;LeastRecentlyUsed&apos;" flags="589830" id="org.eclipse.jdt.ui.rename.type" input="/src&lt;general{LeastRecentlyUsed.java[LeastRecentlyUsed" matchStrategy="1" name="LeastRecentlyUsedCache" qualified="false" references="true" similarDeclarations="false" stamp="1381539050718" textual="false" version="1.0"/>&#x0A;<refactoring comment="Move element &apos;&apos; to &apos;general.DoublyLinkedList.DoublyLinkedListIterator.remove()&apos;&#x0A;- Original project: &apos;TestPractice&apos;&#x0A;- Destination element: &apos;general.DoublyLinkedList.DoublyLinkedListIterator.remove()&apos;&#x0A;- Original element: &apos;general.DoublyLinkedList.main(...)&apos;&#x0A;- Textual move only&#x0A;- Update references to refactored element" description="Move method" destination="/src&lt;general{DoublyLinkedList.java[DoublyLinkedList[DoublyLinkedListIterator~remove" element1="/src&lt;general{DoublyLinkedList.java[DoublyLinkedList~main~\[QString;" flags="589830" id="org.eclipse.jdt.ui.move" members="1" policy="org.eclipse.jdt.ui.moveMembers" stamp="1381601995152" version="1.0"/>&#x0A;<refactoring comment="Move element &apos;&apos; to &apos;general.DoublyLinkedList.iterator()&apos;&#x0A;- Original project: &apos;TestPractice&apos;&#x0A;- Destination element: &apos;general.DoublyLinkedList.iterator()&apos;&#x0A;- Original element: &apos;general.DoublyLinkedList.DoublyLinkedListIterator.main(...)&apos;&#x0A;- Textual move only&#x0A;- Update references to refactored element" description="Move method" destination="/src&lt;general{DoublyLinkedList.java[DoublyLinkedList~iterator" element1="/src&lt;general{DoublyLinkedList.java[DoublyLinkedList[DoublyLinkedListIterator~main~\[QString;" flags="589830" id="org.eclipse.jdt.ui.move" members="1" policy="org.eclipse.jdt.ui.moveMembers" stamp="1381601999414" version="1.0"/>&#x0A;<refactoring comment="Move element &apos;&apos; to &apos;general.DoublyLinkedList.iterator()&apos;&#x0A;- Original project: &apos;TestPractice&apos;&#x0A;- Destination element: &apos;general.DoublyLinkedList.iterator()&apos;&#x0A;- Original element: &apos;general.DoublyLinkedList.DoublyLinkedListIterator&apos;&#x0A;- Textual move only&#x0A;- Update references to refactored element" description="Move type" destination="/src&lt;general{DoublyLinkedList.java[DoublyLinkedList~iterator" element1="/src&lt;general{DoublyLinkedList.java[DoublyLinkedList[DoublyLinkedListIterator" flags="589830" id="org.eclipse.jdt.ui.move" members="1" policy="org.eclipse.jdt.ui.moveMembers" stamp="1381602005210" version="1.0"/>&#x0A;<refactoring comment="Move element &apos;&apos; to &apos;general.DoublyLinkedList.toString()&apos;&#x0A;- Original project: &apos;TestPractice&apos;&#x0A;- Destination element: &apos;general.DoublyLinkedList.toString()&apos;&#x0A;- Original element: &apos;general.DoublyLinkedList.iterator()&apos;&#x0A;- Textual move only&#x0A;- Update references to refactored element" description="Move method" destination="/src&lt;general{DoublyLinkedList.java[DoublyLinkedList~toString" element1="/src&lt;general{DoublyLinkedList.java[DoublyLinkedList~iterator" flags="589830" id="org.eclipse.jdt.ui.move" members="1" policy="org.eclipse.jdt.ui.moveMembers" stamp="1381619228109" version="1.0"/>&#x0A;<refactoring comment="Rename type &apos;general.Queue&apos; to &apos;DoublyLinkedListQueue&apos;&#x0A;- Original project: &apos;TestPractice&apos;&#x0A;- Original element: &apos;general.Queue&apos;&#x0A;- Renamed element: &apos;general.DoublyLinkedListQueue&apos;&#x0A;- Update references to refactored element&#x0A;- Update textual occurrences in comments and strings" description="Rename type &apos;Queue&apos;" flags="589830" id="org.eclipse.jdt.ui.rename.type" input="/src&lt;general{Queue.java[Queue" matchStrategy="1" name="DoublyLinkedListQueue" qualified="false" references="true" similarDeclarations="false" stamp="1381621384574" textual="false" version="1.0"/>
</session>
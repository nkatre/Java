package redo;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

/**
 * Secret Decoded
 * Your task is to decode messages that were encoded with substitution ciphers. 
 * In a substitution cipher, all occurrences of a character are replaced by a different character. 
 * For example, in a cipher that replaces "a" with "d" and "b" with "e", the message "abb" is encoded as "dee".
 * The exact character mappings that are used in the substitution ciphers will not be known to you. 
 * However, the dictionary of words that were used will be given. 
 * You will be given multiple encoded messages to decode (one per line) and they may use different substitution ciphers. 
 * The same substitution cipher is used on all of the words in a particular message.
 * For each scrambled message in the input, your program should output a line with the input line, 
 * followed by the string " = " (without the quotes), followed by the decoded message.
 * 
 * NOTE: All inputs are from stdin and output to stdout. 
 * The input will be exactly like how it's given in the problem and
 * your output should exactly match the given example output
 * 
 * Example:
 * input file:
 * //dict hello there yello thorns //secret 12334 51272 12334 514678
 * output: 
 * 12334 51272 = hello there 12334 514678 = hello thorns
 * 
 * 
test case 1:
//dict
hello
there
yello
thorns
//secret
12334 51272
12334 514678

test case 2:
//dict
hello
there
yello
bob
tom
mabel
says
hi
secret
the
is
to
smile
//secret
45161 01223
x2x 3453 6k
x8z yz67zx 5y x4 y352z

Output:
45161 01223 = there yello
x2x 3453 6k = bob says hi
x8z yz67zx 5y x4 y352z = the secret is to smile
 */
public class SubstitutionCypher {
	
	public static void main(String[] args) {
		
		
		
	}
	
	
	private static class Word {
		private String word;
		private Map<Character, List<Integer>> characterPositions; 
				//= new HashMap<Character, List<Integer>>();
		
		public Word(String s) {
			if(s !=null) {
				word = s;
				characterPositions = new HashMap<Character, List<Integer>>();
				addCharacterPositions(s);
			}
		}

		public String getWord() {
			return word;
		}

		public int length() {
			return word.length();
		}

		public Map<Character, List<Integer>> getCharacterPositions() {
			return characterPositions;
		}

		private void addCharacterPositions(String s) {
			char[] c = s.toCharArray();
			for (int i=0; i<c.length; i++) {
				if(characterPositions.containsKey(c[i])) {
					List<Integer> list = characterPositions.get(c[i]);
					list.add(i);
					characterPositions.put(c[i], list);
				} else {
					List<Integer> list = new LinkedList<Integer>();
					list.add(i);
					characterPositions.put(c[i], list);
				}
			}
		}
	}

}

package general;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class Graph {
	
	private Set<Node> nodes;
	private Set<Edge> edges;
	
	Graph() {
		super();
		nodes = new HashSet<Node>();
		edges = new HashSet<Edge>();
	}
	
	public boolean addNode(Node n) {
		nodes.add(n);
		
		Set<Node> reachableFromSet = n.getReachableFromSet();
		Set<Node> connectedToSet = n.getConnectedToSet();
		
		if (null != reachableFromSet) {
			for(Node x : reachableFromSet ) {
				edges.add(new Edge(x, n));
			}
		}
		
		if (null != connectedToSet) {
			for(Node x : connectedToSet ) {
				edges.add(new Edge(n, x));
			}
		}
		return true;
	}
	
	public String toString() {
		return nodes +  "\n" +edges;
	}
	
	private static class Node<T> {
		
		static enum color {WHITE, GREY, BLACK};
		
		T data;
		
		Set<Node> reachableFromSet;
		Set<Node> connectedToSet;
		
		Node(T data) {
			super();
			this.data = data;
			reachableFromSet = new HashSet<Graph.Node>();
			connectedToSet = new HashSet<Graph.Node>();
		}
		
		Node(T data, Set<Node> reachableFromSet, Set<Node> connectedToSet) {
			this.data = data;
			this.reachableFromSet = reachableFromSet;
			this.connectedToSet = connectedToSet;
		}
		
		
		@Override
		public String toString() {
			return "Node [data=" + data + ", reachableFromSet="
					+ reachableFromSet + ", connectedToSet=" + connectedToSet
					+ "]";
		}


		public boolean addReachableFromNode(Node n) {
			return reachableFromSet.add(n);
		}
		
		public boolean addConnectedToNode(Node n) {
			return connectedToSet.add(n);
		}

		public T getData() {
			return data;
		}

		public void setData(T data) {
			this.data = data;
		}

		public Set<Node> getReachableFromSet() {
			return reachableFromSet;
		}

		public void setReachableFromSet(Set<Node> reachableFromSet) {
			this.reachableFromSet = reachableFromSet;
		}

		public Set<Node> getConnectedToSet() {
			return connectedToSet;
		}

		public void setConnectedToSet(Set<Node> connectedToSet) {
			this.connectedToSet = connectedToSet;
		}
		
		
	}
	
	private static class Edge {
		Node fromNode;
		Node toNode;
		Map <String, Object> edgeProperties;
		
		Edge (Node fromNode, Node toNode) {
			super();
			this.fromNode = fromNode;
			this.toNode = toNode;
			edgeProperties = new HashMap<String, Object>();
		}
		
		Edge (Node fromNode, Node toNode, Map <String, Object> edgeProperties) {
			super();
			this.fromNode = fromNode;
			this.toNode = toNode;
			this.edgeProperties = edgeProperties;
		}

		public Map<String, Object> getEdgeProperties() {
			return edgeProperties;
		}

		public void setEdgeProperties(Map<String, Object> edgeProperties) {
			this.edgeProperties = edgeProperties;
		}
		
		public Couple getNodesConnectedByEdge() {
			Couple couple = new Couple(fromNode, toNode, this);
			return couple;
		}
		
		@Override
		public String toString() {
			return "Edge [fromNode=" + fromNode + ", toNode=" + toNode
					+ ", edgeProperties=" + edgeProperties + "]";
		}
	}
	
	private static class Couple<T> {
		Node<T> fromNode;
		Node<T> toNode;
		Edge connectingEdge;
		
		Couple (Node<T> fromNode, Node<T> toNode, Edge connectingEdge) {
			super();
			this.fromNode = fromNode;
			this.toNode  = toNode;
			this.connectingEdge = connectingEdge;
		}

		public Node<T> getFromNode() {
			return fromNode;
		}

		public void setFromNode(Node<T> fromNode) {
			this.fromNode = fromNode;
		}

		public Node<T> getToNode() {
			return toNode;
		}

		public void setToNode(Node<T> toNode) {
			this.toNode = toNode;
		}

		public Edge getConnectingEdge() {
			return connectingEdge;
		}

		public void setConnectingEdge(Edge connectingEdge) {
			this.connectingEdge = connectingEdge;
		}
		
		
	}
	
	public static void main(String[] args) {
		Graph g = new Graph();
		Node<Integer> n1 = new Node<Integer>(1, null, null);
		Node<Integer> n2 = new Node<Integer>(1, null, null);
		Node<Integer> n3 = new Node<Integer>(1, null, null);
		n1.addConnectedToNode(n2);
		n1.addConnectedToNode(n3);
		n2.addConnectedToNode(n1);
		n2.addConnectedToNode(n3);
		g.addNode(n1);
		g.addNode(n2);
		g.addNode(n3);
		System.out.println(g);
	}
}
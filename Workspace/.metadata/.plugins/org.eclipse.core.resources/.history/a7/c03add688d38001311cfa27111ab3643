package general;

public class StacksAndQueues {
	int[] array = new int[30];
	int stack1Base = 0;
	int stack2Base = 10;
	int stack3Base = 20;
	
	int stack1Top = 9;
	int stack2Top = 19;
	int stack3Top = 29;
	
	int stack1Pointer = -1;
	int stack2Pointer = 9;
	int stack3Pointer = 19;
	/*
	 * Describe how you could use a single array to implement three stacks 
	 */
	// method 1 will give pre-alloted spaces for the threestacks
	public void singleArrayToImplementThreeStacks() {
		
		
	}
	
	private int peekFromStack(int stackNumber) {
		
		if((stackNumber < 0) || (stackNumber > 2)) {
			return -1;
		}
		
		if(stackNumber==0) {
			if((stack1Pointer < 9)) {
				return array[stack1Pointer];
			}
		} else if(stackNumber==1) {
			if((stack2Pointer >= 10) && (stack2Pointer <19)) {
				return array[stack2Pointer];
			}
		} else {
			if((stack3Pointer >= 20) && (stack3Pointer <29)) {
				return array[stack3Pointer];
			}
		}
		return -1;
	}
	
	private int popFromStack(int stackNumber) {
		
		if((stackNumber < 0) || (stackNumber > 2)) {
			return -1;
		}
		
		if(stackNumber==0) {
			if((stack1Pointer >= 0) && (stack1Pointer <= 9)) {
				return array[stack1Pointer--];
			}
		} else if(stackNumber==1) {
			if((stack2Pointer >= 10) && (stack2Pointer <=19)) {
				return array[stack2Pointer--];
			}
		} else {
			if((stack3Pointer >= 20) && (stack3Pointer <= 29)) {
				return array[stack3Pointer--];
			}
		}
		return -1;
	}
	
	private boolean pushInStack(int stackNumber, int number) {
		
		if((stackNumber < 0) || (stackNumber > 2) || (number == 0)) {
			return false;
		}
		
		if(stackNumber==0) {
			if(stack1Pointer < 9) {
				array[stack1Pointer+1] = number;
				stack1Pointer++;
				return true;
			}
		} else if(stackNumber==1) {
			if(stack2Pointer <19) {
				array[stack2Pointer+1] = number;
				stack2Pointer++;
				return true;
			}
		} else {
			if (stack3Pointer <29) {
				array[stack3Pointer+1] = number;
				stack3Pointer++;
				return true;
			}
		}
		return false;
	}
	
	private boolean hasSpace(int stackNumber) {
		if(stackNumber==0) {
			if((stack1Pointer >= 0) && (stack1Pointer < 9)) {
				return true;
			}
		} else if(stackNumber==1) {
			if((stack2Pointer >= 10) && (stack2Pointer <19)) {
				return true;
			}
		} else {
			if((stack3Pointer >= 20) && (stack3Pointer <29)) {
				return true;
			}
		}
		return false;
	}
	
	
	public static void main(String[] args) {
		
		StacksAndQueues s = new StacksAndQueues();
		System.out.println(s.pushInStack(0, 1));
		System.out.println(s.pushInStack(0, 2));
		System.out.println(s.pushInStack(0, 3));
		System.out.println(s.pushInStack(0, 4));
		System.out.println(s.pushInStack(0, 5));
		System.out.println(s.pushInStack(0, 6));
		System.out.println(s.pushInStack(0, 7));
		System.out.println(s.pushInStack(0, 8));
		System.out.println(s.pushInStack(0, 9));
		System.out.println(s.pushInStack(0, 10));
		System.out.println(s.pushInStack(1, 1));
		System.out.println(s.pushInStack(1, 2));
		System.out.println(s.pushInStack(1, 3));
		System.out.println(s.pushInStack(1, 4));
		System.out.println(s.pushInStack(1, 5));
		System.out.println(s.pushInStack(1, 6));
		System.out.println(s.pushInStack(1, 7));
		System.out.println(s.pushInStack(1, 8));
		System.out.println(s.pushInStack(1, 9));
		System.out.println(s.pushInStack(1, 10));
		System.out.println(s.pushInStack(2, 1));
		System.out.println(s.pushInStack(2, 2));
		System.out.println(s.pushInStack(2, 3));
		System.out.println(s.pushInStack(2, 4));
		System.out.println(s.pushInStack(2, 5));
		System.out.println(s.pushInStack(2, 6));
		System.out.println(s.pushInStack(2, 7));
		System.out.println(s.pushInStack(2, 8));
		System.out.println(s.pushInStack(2, 9));
		System.out.println(s.pushInStack(2, 10));
		System.out.println(s.pushInStack(0, 10));
		System.out.println(s.pushInStack(1, 10));
		System.out.println(s.pushInStack(2, 10));
		System.out.println(s.pushInStack(3, 10));
		
		for (int i=0; i<10; i++) {
			System.out.println(s.peekFromStack(0));
			System.out.println(s.peekFromStack(1));
			System.out.println(s.peekFromStack(2));
		}
		System.out.println(s.popFromStack(0));
		System.out.println(s.popFromStack(1));
		System.out.println(s.popFromStack(2));
		
	}
	
	
	
}

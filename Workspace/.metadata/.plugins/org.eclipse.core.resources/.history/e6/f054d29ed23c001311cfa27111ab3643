package general;

import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

/* Write a thread safe data structure such that there could be only one writer 
 * at a time but there could be n readers reading the data. 
 * You can consider that incrementing or decrementing a variable is an atomic operation.
 * If more than one threads try to write simultaneously then just select one randomly and let others wait
 * 
 * A readers-writer lock is like a mutex, in that it controls access to a shared resource, 
 * allowing concurrent access to multiple threads for reading but restricting access to a single thread for writes 
 * (or other changes) to the resource. 
 * A common use might be to control access to a data structure in memory that can't be updated atomically and 
 * isn't valid (and shouldn't be read by another thread) until the update is complete.
 * 
 */
public class ReaderWriterLock {
	
	private Queue<Writer> writerQueue;
	private Queue<Reader> readerQueue;
	
	private static Resource resource;
	private static Lock lock;
	
	private ResourceLockWraper resourceLock;
	
	public ReaderWriterLock() {
		super();
		resource = new Resource();
		lock = new Lock();
		resourceLock = new ResourceLockWraper(resource, lock);
		writerQueue = new Queue<Writer>();
		readerQueue = new Queue<Reader>();
	}

	
	public void addProcess(Process process) {
		if(process.getClass().equals(Writer.class)) {
			writerQueue.enQueue((Writer) process);
		} else if (process.getClass().equals(Reader.class)) {
			readerQueue.enQueue((Reader) process);
		}
	}
	
	public boolean seekLock(Process requestor) {
		
		if(requestor.getClass().equals(Reader.class)) {
			readerQueue.enQueue((Reader) requestor);
			if(isAvailableForLocking()) {
				return handOverLockToReaders();
			} else {
				return false;
			}
		} else if(requestor.getClass().equals(Writer.class)) {
			writerQueue.enQueue((Writer) requestor);
			if(isAvailableForLocking()) {
				return handOverLockToNextWriter();
			} else {
				return false;
			}
		} else {
			System.out.println("request for either read or write lock. the vaue passed is NONE");
			return false;
		}
	}


	public boolean releaseLock(Process requestor) {
		
		if(requestor.getClass().equals(Writer.class)) {
			resourceLock.lock.writeholder = null;
			return handOverLockToReaders();
		} else if(requestor.getClass().equals(Reader.class)) {
			resourceLock.lock.holders = new LinkedList<Process>();
			return handOverLockToNextWriter();
		}
		
		return false;
	}


	private Process.lockType checkHolderType() {
		return resourceLock.getLock().type;
	}
	
	private boolean isAvailableForLocking() {
		if(resourceLock.getLock().getType().equals(Process.lockType.NONE)) {
			return true;
		}
		return false;
	}
	
	private boolean handOverLockToNextWriter() {
		
		if(isAvailableForLocking()) {
			if(writerQueue.size()==0) {
				return false;
			} 
			Process writer = writerQueue.poll();
			resourceLock.getLock().holders.add(writer);
			
			return true;
		}
		
		return false;
	}
	
	private boolean handOverLockToReaders() {
		if ((resourceLock.getLock().getHolders().size() == 0) && isAvailableForLocking()) {
			resourceLock.lock.type = Process.lockType.READER;
			while(readerQueue.size() !=0) {
				resourceLock.getLock().holders.add(readerQueue.poll());	
			}
			return true;
		}
		
		return false;
	}
	
	@Override
	public String toString() {
		return "ReaderWriterLock [writerQueue=" + writerQueue
				+ ", readerQueue=" + readerQueue + ", resourceLock="
				+ resourceLock + "]";
	}


	public static void main(String[] args) {
		
		ReaderWriterLock  rwl = new ReaderWriterLock();
		System.out.println(rwl);
		
		Reader r1 = rwl.new Reader(1);
		Writer w1 = rwl.new Writer(1);
		
		System.out.println(rwl.seekLock(r1));
		System.out.println(rwl + ":::" + rwl.releaseLock(r1));
		System.out.println(rwl + ":::" + rwl.seekLock(w1));
	}

	private static class Lock {
	    
	    private Process.lockType type;
	    private Process writeholder;
	    private List<Process> readholders;
	    
	    private Lock() {
			super();
			type = Process.lockType.NONE;
			holders = new LinkedList<Process>();
		}
		
		@Override
		public String toString() {
			return "Lock [type=" + type + ", holders=" + holders + "]";
		}

		public Process.lockType getType() {
			return type;
		}

		public List<Process> getHolders() {
			return holders;
		}
		
	}
	
	private static class ResourceLockWraper {
		Resource resource;
		Lock lock;
		
		public ResourceLockWraper(Resource resource, Lock lock) {
			super();
			this.resource = resource;
			this.lock = lock;
		}

		public Resource getResource() {
			return resource;
		}

		public void setResource(Resource resource) {
			this.resource = resource;
		}

		public Lock getLock() {
			return lock;
		}

		public void setLock(Lock lock) {
			this.lock = lock;
		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + ((lock == null) ? 0 : lock.hashCode());
			result = prime * result
					+ ((resource == null) ? 0 : resource.hashCode());
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			ResourceLockWraper other = (ResourceLockWraper) obj;
			if (lock == null) {
				if (other.lock != null)
					return false;
			} else if (!lock.equals(other.lock))
				return false;
			if (resource == null) {
				if (other.resource != null)
					return false;
			} else if (!resource.equals(other.resource))
				return false;
			return true;
		}

		@Override
		public String toString() {
			return "ResourceLockWraper [resource=" + resource + ", lock="
					+ lock + "]";
		}
		
	}

	private static class Resource {
		private int id;
		
		public int getId() {
			return id;
		}

		public void setId(int id) {
			this.id = id;
		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + id;
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Resource other = (Resource) obj;
			if (id != other.id)
				return false;
			return true;
		}
		

		@Override
		public String toString() {
			return "Resource [id=" + id + "]";
		}
		
		
	}

	private static interface Process{
		int getId();
		void setId(int id);
		enum lockType { WRITER, READER, NONE }
	}

	private class Writer implements Process {
		
		private int id;
		
		Writer(int id) {
			super();
			setId(id);
		}
	
		@Override
		public int getId() {
			return id;
		}
	
		@Override
		public void setId(int id) {
			this.id = id;
		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + getOuterType().hashCode();
			result = prime * result + id;
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Writer other = (Writer) obj;
			if (!getOuterType().equals(other.getOuterType()))
				return false;
			if (id != other.id)
				return false;
			return true;
		}

		private ReaderWriterLock getOuterType() {
			return ReaderWriterLock.this;
		}

		@Override
		public String toString() {
			return "Writer [id=" + id + "]";
		}

	}

	private class Reader implements Process {
		
		private int id;
		
		Reader (int id) {
			super();
			setId(id);
		}
	
		@Override
		public int getId() {
			return id;
		}
	
		@Override
		public void setId(int id) {
			this.id = id;
		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + getOuterType().hashCode();
			result = prime * result + id;
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Reader other = (Reader) obj;
			if (!getOuterType().equals(other.getOuterType()))
				return false;
			if (id != other.id)
				return false;
			return true;
		}

		private ReaderWriterLock getOuterType() {
			return ReaderWriterLock.this;
		}

		@Override
		public String toString() {
			return "Reader [id=" + id + "]";
		}
	}
}

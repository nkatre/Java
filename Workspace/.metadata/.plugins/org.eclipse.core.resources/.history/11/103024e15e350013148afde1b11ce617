package general;

public class MergeSort<T> implements Comparable {

	T[] array;
	T[] helper;

	MergeSort(T[] data) {
		this.array = data;
	}

	public void sort() {
		mergeSort(array, 0, (array.length-1));
	}

	private void mergeSort(T[] arr, int start, int end) {

		if(null == arr) {
			return;
		}

		if(start==end) {
			return;
		}

		if(start < end) {
			int mid = (start + (end - start))/2;
			mergeSort(arr, start, mid);
			mergeSort(arr, mid+1, end);
			merge(arr, start, mid, end);
		}
	}

	private void merge(int startPosition, int midPosition, int endPosition) {

		int leftArraySize = midPosition - startPosition;
		int rightArraySize = endPosition - midPosition;

		T[] leftArray = (T[]) new Object[leftArraySize];
		T[] rightArray = (T[]) new Object[rightArraySize];

		for(int i=0; i<leftArraySize; i++) {
			leftArray[i] = array[startPosition+i];
		}

		for(int i=0; i<rightArraySize; i++) {
			rightArray[i] = array[midPosition+i];
		}

		if((leftArray.length==0) || (rightArray.length==0))
			return;

		System.out.println("leftArray " + arrayToString(leftArray));
		System.out.println("rightArray " + arrayToString(rightArray));

		int leftArrayPointer = 0;
		int rightArrayPointer = 0;

		System.out.println(" startPosition " + startPosition + " endPosition " + endPosition);
		for(int i=0; i< (endPosition - startPosition); i++) {
			System.out.println("leftArrayPointer " + leftArrayPointer + " rightArrayPointer " + rightArrayPointer);

			if((leftArray.length <= leftArrayPointer) && (rightArray.length > rightArrayPointer)) {
				array[i] = rightArray[rightArrayPointer];
				rightArrayPointer++;
			} else if((leftArray.length > leftArrayPointer) && (rightArray.length <= rightArrayPointer)) {
				array[i] = leftArray[leftArrayPointer];
				leftArrayPointer++;
			} else if((leftArray.length <= leftArrayPointer) && (rightArray.length <= rightArrayPointer)) {
				break;
			} else if(((Comparable) leftArray[leftArrayPointer]).compareTo(rightArray[rightArrayPointer]) <= 0) {
				array[i] = leftArray[leftArrayPointer];
				leftArrayPointer++;
			} else {
				array[i] = rightArray[rightArrayPointer];
				rightArrayPointer++;
			}
		}

		return array;
	}

	@Override
	public int compareTo(Object obj) {
		return this.compareTo((T) obj);		
	}

	@Override
	public String toString(){

		if (null == array) {
			return null;
		}

		StringBuilder sb = new StringBuilder();

		for(int i= 0; i< array.length; i++) {
			sb.append(array[i]+ " ");
		}

		return sb.toString();
	}

	private String arrayToString(T[] a){

		if (null == a) {
			return null;
		}

		StringBuilder sb = new StringBuilder();

		for(int i= 0; i< a.length; i++) {
			sb.append(a[i]+ " ");
		}

		return sb.toString();
	}

	public static void main(String[] args) {
		Integer[] array = {10, 8, 7, 4, 5, 6, 3, 2, 1, 0};
		MergeSort<Integer> mSort = new MergeSort<Integer>(array);
		mSort.sort();
		System.out.println(mSort);
	}

}

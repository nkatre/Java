package general;

import java.util.Iterator;
import java.util.List;
import java.util.LinkedList;
import java.util.Set;
import java.util.HashSet;

public class Deadlock {
	
	private List<Process> processPool = new LinkedList<Process>();
	private List<Resource> resourcePool = new LinkedList<Resource>();
	private Set<Resource> resourceAvailablePool = new HashSet<Resource>();

	public List<Process> getProcessPool() {
		return processPool;
	}

	public void setProcessPool(List<Process> processPool) {
		this.processPool = processPool;
	}

	public List<Resource> getResourcePool() {
		return resourcePool;
	}

	public boolean addResourceToPool(Resource resource) {
		if(isResourceInPool(resource.getId()))
			return false;
		this.resourcePool.add(resource);
		return true;
	}
	
	public boolean addProcessToPool(Process process) {
		if(isProcessInPool(process.getId()))
			return false;
		this.processPool.add(process);
		return true;
	}
	
	public boolean addResourceInAvailablePool(Resource resource) {
		if(isResourceInAvailablePool(resource.getId()))
			return false;
		this.resourcePool.add(resource);
		return true;
	}

	public Set<Resource> getResourceAvailablePool() {
		return resourceAvailablePool;
	}

	public void setResourceAvailablePool(Set<Resource> resourceAvailablePool) {
		this.resourceAvailablePool = resourceAvailablePool;
	}

	public void setResourcePool(List<Resource> resourcePool) {
		this.resourcePool = resourcePool;
	}

	public boolean allocateResource(Process process, Resource resource) {
		if (isProcessInPool(process.getId()) && isResourceInPool(resource.getId())) {
			if(isResourceInAvailablePool(resource.getId())) {
				process. 
				
				return true;
			} else {
				
				return false;
			}
		}
		return false;
	}
	

	
	private boolean isResourceInAvailablePool(int resourceId) {
		Iterator<Resource> iterator = getResourceAvailablePool().iterator();
		while(iterator.hasNext()) {
			if(iterator.next().getId() == resourceId) {
				return true;
			}
		}
		return false;
	}
	
	private boolean isResourceInPool(int resourceId) {
		Iterator<Resource> iterator = getResourcePool().iterator();
		while(iterator.hasNext()) {
			if(iterator.next().getId() == resourceId) {
				return true;
			}
		}
		return false;
	}
	
	private boolean isProcessInPool(int processId) {
		Iterator<Process> iterator = getProcessPool().iterator();
		while(iterator.hasNext()) {
			if(iterator.next().getId() == processId) {
				return true;
			}
		}
		return false;
	}
	
	private class Process {
		private int id;
		List<Resource> resourceHeld = new LinkedList<Resource>();
		List<Resource> resourceWaitingFor = new LinkedList<Resource>();
		
		public boolean addResourceHeld(Resource resource) {
			if(isResourceInPool(resource.getId())) {
				
				if(resourceHeld.contains(resource)) {
					return false;
				}
				
				resourceHeld.add(resource);
				resource.setUsed(true);
				resourceAvailablePool.remove(resource);
				
				return true;
			}
			return false;
		}
		
		public boolean addResourceWaitingFor(Resource resource) {
			if(isResourceInPool(resource.getId())) {
				if(resourceWaitingFor.contains(resource)) {
					return false;
				}
				resourceWaitingFor.add(resource);
				return true;
			}
			return false;
		}
		
		public boolean releaseResourceHeld(Resource resource) {
			if(isResourceInPool(resource.getId()))  {
				if(resourceHeld.contains(resource)) {
					resourceHeld.remove(resource);
					resourceAvailablePool.add(resource);
					return true;
				}
				return false;
			}
			return false;
		}
		
		public int getId() {
			return id;
		}
		public void setId(int id) {
			this.id = id;
		}
		public List<Resource> getResourceHeld() {
			return resourceHeld;
		}
		public void setResourceHeld(List<Resource> resourceHeld) {
			this.resourceHeld = resourceHeld;
		}
		public List<Resource> getResourceWaitingFor() {
			return resourceWaitingFor;
		}
		public void setResourceWaitingFor(List<Resource> resourceWaitingFor) {
			this.resourceWaitingFor = resourceWaitingFor;
		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + getOuterType().hashCode();
			result = prime * result + id;
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Process other = (Process) obj;
			if (!getOuterType().equals(other.getOuterType()))
				return false;
			if (id != other.id)
				return false;
			return true;
		}

		private Deadlock getOuterType() {
			return Deadlock.this;
		}
		
	}
	
	private class Resource {
		private int id;
		private boolean isUsed;
		
		public int getId() {
			return id;
		}
		public void setId(int id) {
			this.id = id;
		}
		public boolean isUsed() {
			return isUsed;
		}
		public void setUsed(boolean isUsed) {
			this.isUsed = isUsed;
		}
		
		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + getOuterType().hashCode();
			result = prime * result + id;
			return result;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Resource other = (Resource) obj;
			if (!getOuterType().equals(other.getOuterType()))
				return false;
			if (id != other.id)
				return false;
			return true;
		}
		
		private Deadlock getOuterType() {
			return Deadlock.this;
		}
		
		
		
		
	}

}

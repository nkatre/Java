package general;

import java.util.Iterator;
import java.util.List;
import java.util.LinkedList;
import java.util.Set;
import java.util.HashSet;

public class Deadlock {
	
	private List<Process> processPool = new LinkedList<Process>();
	private List<Resource> resourcePool = new LinkedList<Resource>();
	private Set<Resource> resourceAvailablePool = new HashSet<Resource>();

	public List<Process> getProcessPool() {
		return processPool;
	}

	public void setProcessPool(List<Process> processPool) {
		this.processPool = processPool;
	}

	public List<Resource> getResourcePool() {
		return resourcePool;
	}

	public boolean addResourceToPool(Resource resource) {
		if(isResourceInPool(resource.getId()))
			return false;
		this.resourcePool.add(resource);
		return true;
	}
	
	public boolean addProcessToPool(Process process) {
		if(isProcessInPool(process.getId()))
			return false;
		this.processPool.add(process);
		return true;
	}
	
	public boolean addResourceInAvailablePool(Resource resource) {
		if(hasResourceInAvailablePool(resource.getId()))
			return false;
		this.resourcePool.add(resource);
		return true;
	}

	public Set<Resource> getResourceAvailablePool() {
		return resourceAvailablePool;
	}

	public void setResourceAvailablePool(Set<Resource> resourceAvailablePool) {
		this.resourceAvailablePool = resourceAvailablePool;
	}

	public void setResourcePool(List<Resource> resourcePool) {
		this.resourcePool = resourcePool;
	}

	public boolean allocateResource(int processId, int resourceId) {
		if
	}
	
	private boolean hasProcessInActivePool(int processId) {
		Iterator<Process> iterator = getProcessPool().iterator();
		while(iterator.hasNext()) {
			if(iterator.next().getId() == processId) {
				return true;
			}
		}
		return false;
	}
	
	private boolean hasResourceInAvailablePool(int resourceId) {
		Iterator<Resource> iterator = getResourceAvailablePool().iterator();
		while(iterator.hasNext()) {
			if(iterator.next().getId() == resourceId) {
				return true;
			}
		}
		return false;
	}
	
	private boolean isResourceInPool(int resourceId) {
		Iterator<Resource> iterator = getResourcePool().iterator();
		while(iterator.hasNext()) {
			if(iterator.next().getId() == resourceId) {
				return true;
			}
		}
		return false;
	}
	
	private boolean isProcessInPool(int processId) {
		Iterator<Process> iterator = getProcessPool().iterator();
		while(iterator.hasNext()) {
			if(iterator.next().getId() == processId) {
				return true;
			}
		}
		return false;
	}
	
	private class Process {
		private int id;
		List<Resource> resourceHeld = new LinkedList<Resource>();
		List<Resource> resourceWaitingFor = new LinkedList<Resource>();
		public int getId() {
			return id;
		}
		public void setId(int id) {
			this.id = id;
		}
		public List<Resource> getResourceHeld() {
			return resourceHeld;
		}
		public void setResourceHeld(List<Resource> resourceHeld) {
			this.resourceHeld = resourceHeld;
		}
		public List<Resource> getResourceWaitingFor() {
			return resourceWaitingFor;
		}
		public void setResourceWaitingFor(List<Resource> resourceWaitingFor) {
			this.resourceWaitingFor = resourceWaitingFor;
		}
	}
	
	private class Resource {
		private int id;
		private boolean isUsed;
		
		public int getId() {
			return id;
		}
		public void setId(int id) {
			this.id = id;
		}
		public boolean isUsed() {
			return isUsed;
		}
		public void setUsed(boolean isUsed) {
			this.isUsed = isUsed;
		}
		
		
		
	}

}

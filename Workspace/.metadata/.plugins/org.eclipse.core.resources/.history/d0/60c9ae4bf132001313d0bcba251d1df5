package general;

import java.util.Iterator;

public class DoublyLinkedList<T> {
	
	Node head;
	Node tail;
	
	public boolean insert(T data) {
		if(null==head) {
			head = tail = new Node(data);
			return true;
		}
		
		Node newNode = new Node(data);
		tail.next = newNode;
		newNode.previous = tail;
		tail = newNode;
		return true;
		
	}
	
	public boolean insert(int index, T data) {
		
		return false;
	}
	
	public boolean remove(T data) {
		
		
		return false;
	}
	
	public int getIndex(T data) {
		
		return -1;
	}
	
	public Iterator getIterator() {
		
		
		return null;
	}
	
	@Override
	public String toString() {
		
		if(null == head)
			return null;
		
		StringBuilder sb = new StringBuilder();
		Node n = head;
		
		while(null != n.next) {
			sb.append(n.data + " ");
		}
		
		return sb.toString();
	}
	
	public 
	
	class Node {
		T data;
		Node next;
		Node previous;
		
		public Node(T data) {
			super();
			this.data = data;
		}
		
		public Node(T data, Node next, Node previous) {
			super();
			this.data = data;
			this.next = next;
			this.previous = previous;
		}
		
		public T getData() {
			return data;
		}
		public void setData(T data) {
			this.data = data;
		}
		public Node getNext() {
			return next;
		}
		public void setNext(Node next) {
			this.next = next;
		}
		public Node getPrevious() {
			return previous;
		}
		public void setPrevious(Node previous) {
			this.previous = previous;
		}
		
		@Override
		public String toString() {
			return "Node [data=" + data + ", next=" + next + ", previous="
					+ previous + "]";
		}
		
		
	}
	
	public static void main(String[] args) {
		DoublyLinkedList<String> list = new DoublyLinkedList<String>();
		list.insert("One");
	}
	
}
